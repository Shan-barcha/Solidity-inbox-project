import { AbiConstructorFragment, AbiEventFragment, AbiFunctionFragment, LogsInput, Filter, HexString, DataFormat } from 'web3-types';
import { ContractOptions, ContractAbiWithSignature, EventLog } from './types.js';
declare type Writeable<T> = {
    -readonly [P in keyof T]: T[P];
};
export declare const encodeEventABI: ({ address }: ContractOptions, event: AbiEventFragment & {
    signature: string;
}, options?: Filter) => Writeable<Filter>;
export declare const decodeEventABI: (event: AbiEventFragment & {
    signature: string;
}, data: LogsInput, jsonInterface: ContractAbiWithSignature, returnFormat?: DataFormat) => EventLog;
export declare const encodeMethodABI: (abi: AbiFunctionFragment | AbiConstructorFragment, args: unknown[], deployData?: HexString) => string;
export declare const decodeMethodReturn: (abi: AbiFunctionFragment, returnValues?: HexString) => unknown;
export {};
//# sourceMappingURL=encoding.d.ts.map