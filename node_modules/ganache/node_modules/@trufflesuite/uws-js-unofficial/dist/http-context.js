"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.HttpContext = void 0;
const http_1 = __importDefault(require("http"));
const ws_1 = __importDefault(require("ws"));
const http_router_1 = require("./http-router");
const websocket_1 = require("./websocket");
const UWS_DEFAULT_MAX_PAYLOAD_LENGTH = 16 * 1024;
class HttpContext {
    constructor() {
        this.sockets = new Set();
        this.router = new http_router_1.HttpRouter();
        this.closed = false;
        this.http = null;
        this.wsServer = null;
        this.wsBehaviors = new Map();
    }
    onHttp(method, pattern, handler, upgrade = false) {
        // Todo: This is ugly, fix
        let methods;
        if (method === "*") {
            methods = this.router.methods;
        }
        else {
            methods = [method];
        }
        this.router.add(methods, pattern.toString(), (r) => {
            const user = r.getUserData();
            if (user === null) {
                throw new Error("Could not retrieve user data; this should not happen.");
            }
            user.httpRequest.setYield(false);
            user.httpRequest.setParameters(r.getParameters());
            /* Middleware? Automatically respond to expectations */
            const expect = user.httpRequest.getHeader("expect");
            if (expect != null && expect == "100-continue") {
                user.httpResponse.writeContinue();
            }
            handler(user.httpResponse, user.httpRequest);
            /* If any handler yielded, the router will keep looking for a suitable handler. */
            if (user.httpRequest.getYield()) {
                return false;
            }
            return true;
        }, method === "*"
            ? this.router.LOW_PRIORITY
            : upgrade
                ? this.router.HIGH_PRIORITY
                : this.router.MEDIUM_PRIORITY);
    }
    address() {
        // ganache doesn't support listening on a pipe or Unix domain socket,
        // so `this.http.address()` can never return a string.
        return this.http ? this.http.address() : null;
    }
    onWs(pattern, behavior) {
        // We only need to create the WebSocket Server once, but we shouldn't
        // create it if the user never calls `TemplatedApp.ws(...)`
        if (!this.wsServer) {
            const maxPayloadLength = behavior && "maxPayloadLength" in behavior
                ? behavior.maxPayloadLength
                : UWS_DEFAULT_MAX_PAYLOAD_LENGTH;
            this.wsServer = new ws_1.default.Server({
                // `noServer: true` is necessary for us to be able to call `handleUpgrade`
                // called in `TemplatedApp.upgradeHandler`
                noServer: true,
                maxPayload: maxPayloadLength,
            });
        }
        this.wsBehaviors.set(pattern, behavior);
    }
    handleRequest(req, res) {
        this.router.setUserData(req, res);
        if (!req.method || !req.url || !this.router.route(req.method.toLowerCase(), req.url)) {
            res.destroy();
            return null;
        }
    }
    handleHttpUpgrade(request, socket, head) {
        const pathname = request.url;
        if (this.wsServer !== null) {
            const patterns = this.wsBehaviors.keys();
            for (const pattern of patterns) {
                if (pathname === pattern) {
                    const behavior = this.wsBehaviors.get(pattern);
                    if (typeof behavior.upgrade === "function") {
                        // TODO: custom upgrade handler functionality isn't required
                        // yet in Ganache, so this isn't implemented currently
                        throw new Error("not implemented");
                    }
                    else {
                        this.wsServer.handleUpgrade(request, socket, head, (internalWs) => {
                            const ws = new websocket_1.WebSocket(internalWs);
                            ws.initialize(behavior);
                            this.wsServer.emit("connection", internalWs, request);
                        });
                    }
                    break;
                }
            }
        }
        else {
            socket.end("HTTP/1.1 400 Unexpected server response\n\n");
        }
    }
    listen(host, port, callback) {
        const server = this.http = http_1.default.createServer(this.handleRequest.bind(this));
        server.on("connection", socket => {
            server.once("close", () => {
                this.sockets.delete(socket);
            });
        });
        server.on("upgrade", this.handleHttpUpgrade.bind(this));
        const handleError = (err) => {
            if (err.syscall === "listen") {
                server.removeListener("error", handleError);
                callback(false);
            }
            else
                throw err;
        };
        server.on("error", handleError);
        server.on("listening", () => server.removeListener("error", handleError));
        const options = { port, exclusive: true };
        if (host) {
            options.host = host.toString();
        }
        server.listen(options, () => {
            this.closed = false;
            callback(this);
        });
    }
    close(cb) {
        this.closed = true;
        for (const socket of this.sockets) {
            socket.destroy();
            this.sockets.delete(socket);
        }
        if (this.wsServer) {
            this.wsServer.close();
        }
        if (this.http) {
            this.http.close(() => {
                this.http = null;
                if (cb) {
                    cb();
                }
            });
        }
        else {
            if (cb) {
                cb();
            }
        }
    }
}
exports.HttpContext = HttpContext;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHR0cC1jb250ZXh0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2ZhbGxiYWNrL2h0dHAtY29udGV4dC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFDQSxnREFBNkQ7QUFHN0QsNENBQW1DO0FBRW5DLCtDQUEyQztBQUUzQywyQ0FBd0M7QUFFeEMsTUFBTSw4QkFBOEIsR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFDO0FBRWpELE1BQWEsV0FBVztJQU90QjtRQXVIUSxZQUFPLEdBQUcsSUFBSSxHQUFHLEVBQVUsQ0FBQztRQXRIbEMsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLHdCQUFVLEVBQUUsQ0FBQztRQUMvQixJQUFJLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQztRQUNwQixJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztRQUNqQixJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQztRQUNyQixJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksR0FBRyxFQUF1QyxDQUFDO0lBQ3BFLENBQUM7SUFFTSxNQUFNLENBQ1gsTUFBb0IsRUFDcEIsT0FBeUIsRUFDekIsT0FBb0IsRUFDcEIsVUFBbUIsS0FBSztRQUV4QiwwQkFBMEI7UUFDMUIsSUFBSSxPQUEwQixDQUFDO1FBQy9CLElBQUksTUFBTSxLQUFLLEdBQUcsRUFBRTtZQUNsQixPQUFPLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUM7U0FDL0I7YUFBTTtZQUNMLE9BQU8sR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3BCO1FBRUQsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQ2IsT0FBTyxFQUNQLE9BQU8sQ0FBQyxRQUFRLEVBQUUsRUFDbEIsQ0FBQyxDQUFhLEVBQUUsRUFBRTtZQUNoQixNQUFNLElBQUksR0FBRyxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUM7WUFFN0IsSUFBSSxJQUFJLEtBQUssSUFBSSxFQUFFO2dCQUNqQixNQUFN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