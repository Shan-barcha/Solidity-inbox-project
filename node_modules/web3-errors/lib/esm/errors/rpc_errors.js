/*
This file is part of web3.js.

web3.js is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

web3.js is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/
import { BaseWeb3Error } from '../web3_error_base.js';
import { ERR_RPC_INTERNAL_ERROR, ERR_RPC_INVALID_INPUT, ERR_RPC_INVALID_JSON, ERR_RPC_INVALID_METHOD, ERR_RPC_INVALID_PARAMS, ERR_RPC_INVALID_REQUEST, ERR_RPC_LIMIT_EXCEEDED, ERR_RPC_MISSING_RESOURCE, ERR_RPC_NOT_SUPPORTED, ERR_RPC_TRANSACTION_REJECTED, ERR_RPC_UNAVAILABLE_RESOURCE, ERR_RPC_UNSUPPORTED_METHOD, } from '../error_codes.js';
export class RpcError extends BaseWeb3Error {
    constructor(rpcError, message) {
        super(message !== null && message !== void 0 ? message : `An Rpc error has occured with a code of ${rpcError.error.code}`);
        this.code = rpcError.error.code;
        this.id = rpcError.id;
        this.jsonrpc = rpcError.jsonrpc;
        this.jsonRpcError = rpcError.error;
    }
    toJSON() {
        return Object.assign(Object.assign({}, super.toJSON()), { error: this.jsonRpcError, id: this.id, jsonRpc: this.jsonrpc });
    }
}
export class ParseError extends RpcError {
    constructor(rpcError) {
        super(rpcError, 'Parse error');
        this.code = ERR_RPC_INVALID_JSON;
    }
}
export class InvalidRequestError extends RpcError {
    constructor(rpcError) {
        super(rpcError, 'Invalid request');
        this.code = ERR_RPC_INVALID_REQUEST;
    }
}
export class MethodNotFoundError extends RpcError {
    constructor(rpcError) {
        super(rpcError, 'Method not found');
        this.code = ERR_RPC_INVALID_METHOD;
    }
}
export class InvalidParamsError extends RpcError {
    constructor(rpcError) {
        super(rpcError, 'Invalid request');
        this.code = ERR_RPC_INVALID_PARAMS;
    }
}
export class InternalError extends RpcError {
    constructor(rpcError) {
        super(rpcError, 'Internal error');
        this.code = ERR_RPC_INTERNAL_ERROR;
    }
}
export class InvalidInputError extends RpcError {
    constructor(rpcError) {
        super(rpcError, 'Invalid input');
        this.code = ERR_RPC_INVALID_INPUT;
    }
}
export class MethodNotSupported extends RpcError {
    constructor(rpcError) {
        super(rpcError, 'Method not supported');
        this.code = ERR_RPC_UNSUPPORTED_METHOD;
    }
}
export class ResourceUnavailableError extends RpcError {
    constructor(rpcError) {
        super(rpcError, 'Resource unavailable');
        this.code = ERR_RPC_UNAVAILABLE_RESOURCE;
    }
}
export class ResourcesNotFoundError extends RpcError {
    constructor(rpcError) {
        super(rpcError, 'Resource not found');
        this.code = ERR_RPC_MISSING_RESOURCE;
    }
}
export class VersionNotSupportedError extends RpcError {
    constructor(rpcError) {
        super(rpcError, 'JSON-RPC version not supported');
        this.code = ERR_RPC_NOT_SUPPORTED;
    }
}
export class TransactionRejectedError extends RpcError {
    constructor(rpcError) {
        super(rpcError, 'Transaction rejected');
        this.code = ERR_RPC_TRANSACTION_REJECTED;
    }
}
export class LimitExceededError extends RpcError {
    constructor(rpcError) {
        super(rpcError, 'Limit exceeded');
        this.code = ERR_RPC_LIMIT_EXCEEDED;
    }
}
export const rpcErrorsMap = new Map();
rpcErrorsMap.set(ERR_RPC_INVALID_JSON, { error: ParseError });
rpcErrorsMap.set(ERR_RPC_INVALID_REQUEST, {
    error: InvalidRequestError,
});
rpcErrorsMap.set(ERR_RPC_INVALID_METHOD, {
    error: MethodNotFoundError,
});
rpcErrorsMap.set(ERR_RPC_INVALID_PARAMS, { error: InvalidParamsError });
rpcErrorsMap.set(ERR_RPC_INTERNAL_ERROR, { error: InternalError });
rpcErrorsMap.set(ERR_RPC_INVALID_INPUT, { error: InvalidInputError });
rpcErrorsMap.set(ERR_RPC_UNSUPPORTED_METHOD, {
    error: MethodNotSupported,
});
rpcErrorsMap.set(ERR_RPC_UNAVAILABLE_RESOURCE, {
    error: ResourceUnavailableError,
});
rpcErrorsMap.set(ERR_RPC_TRANSACTION_REJECTED, {
    error: TransactionRejectedError,
});
rpcErrorsMap.set(ERR_RPC_MISSING_RESOURCE, {
    error: ResourcesNotFoundError,
});
rpcErrorsMap.set(ERR_RPC_NOT_SUPPORTED, {
    error: VersionNotSupportedError,
});
rpcErrorsMap.set(ERR_RPC_LIMIT_EXCEEDED, { error: LimitExceededError });
//# sourceMappingURL=rpc_errors.js.map